import React, { useState } from 'react';
import { X, Upload } from 'lucide-react';
import { Ticket } from '../../types';
import { useAuth } from '../../context/AuthContext';
import { useTickets } from '../../context/TicketContext';

interface TicketFormProps {
  isOpen: boolean;
  onClose: () => void;
  ticket?: Ticket;
}

const TicketForm: React.FC<TicketFormProps> = ({ isOpen, onClose, ticket }) => {
  const { user } = useAuth();
  const { selectedModule } = useAuth();
  const { createTicket, updateTicket, users, tickets } = useTickets();
  const [loading, setLoading] = useState(false);
  const [files, setFiles] = useState<FileList | null>(null);

  // Check if user can manage steps (EO and DO only)
  const canManageSteps = user?.role === 'EO' || user?.role === 'DO';
  
  // Get module-specific ticket prefix
  const getTicketPrefix = (moduleId: string): string => {
    const modulePrefixes: Record<string, string> = {
      '550e8400-e29b-41d4-a716-446655440001': 'MTKT', // Maintenance Tracker
      '550e8400-e29b-41d4-a716-446655440002': 'RTKT', // RTI Tracker
      '550e8400-e29b-41d4-a716-446655440003': 'CTKT', // Complaints Tracker
      '550e8400-e29b-41d4-a716-446655440004': 'GTKT', // Grievances Management
      '550e8400-e29b-41d4-a716-446655440005': 'PTKT'  // Project Execution Platform
    };
    return modulePrefixes[moduleId] || 'TKT';
  };

  // Generate ticket number for new tickets
  const generateTicketNumber = () => {
    if (ticket) return ticket.ticketNumber; // Use existing ticket number for editing
    
    const prefix = selectedModule ? getTicketPrefix(selectedModule.id) : 'TKT';
    
    // Get all tickets for the current module and extract their numbers
    const moduleTickets = tickets
      .filter(t => t.moduleId === selectedModule?.id) // Filter by current module
    
    const existingNumbers = moduleTickets.map(t => {
      const match = t.ticketNumber.match(new RegExp(`${prefix}-(\\d+)`));
      return match ? parseInt(match[1]) : 0;
    });
    
    // Find the next available number
    const nextNumber = Math.max(...existingNumbers, 0) + 1;
    return `${prefix}-${String(nextNumber).padStart(3, '0')}`;
  };

  const [formData, setFormData] = useState({
    ticketNumber: ticket?.ticketNumber || '', // Will be generated on form render
    title: ticket?.title || '',
    description: ticket?.description || '',
    status: ticket?.status || 'DRAFT',
    priority: ticket?.priority || 'MEDIUM',
    category: ticket?.category || 'General',
    assignedTo: ticket?.assignedTo || '',
    estCompletionDate: ticket?.dueDate ? ticket.dueDate.toISOString().split('T')[0] : '',
    department: ticket?.department || user?.department || ''
  });

  // Update ticket number when component mounts or tickets change
  React.useEffect(() => {
    if (!ticket) {
      setFormData(prev => ({
        ...prev,
        ticketNumber: generateTicketNumber()
      }));
    }
  }, [tickets, selectedModule]);
  const isEditing = !!ticket;

  if (!isOpen) return null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user || !selectedModule) return;

    setLoading(true);
    try {
      const ticketData = {
        moduleId: selectedModule.id,
        title: formData.title,
        description: formData.description,
        status: formData.status as const,
        priority: formData.priority as const,
        category: formData.category,
        assignedTo: formData.assignedTo || undefined,
        department: formData.department,
        dueDate: formData.estCompletionDate ? new Date(formData.estCompletionDate) : undefined,
        createdBy: user.id,
      };

      if (isEditing && ticket) {
        await updateTicket(ticket.id, ticketData);
      } else {
        await createTicket(ticketData);
      }
      
      onClose();
      // Reset form data
      setFormData({
        ticketNumber: '', // Will be regenerated by useEffect
        title: '',
        description: '',
        status: 'DRAFT',
        priority: 'MEDIUM',
        category: 'General',
        assignedTo: '',
        estCompletionDate: '',
        department: user?.department || ''
      });
    } catch (error) {
      console.error('Ticket creation error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to save ticket';
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFiles(e.target.files);
  };

  const availableUsers = users.filter(u => {
    if (user?.role === 'EO') return true;
    if (user?.role === 'DO') return u.department === user.department;
    return u.id === user?.id;
  });

  const availableDepartments = [...new Set(users.map(u => u.department))];
  const availableCategories = selectedModule?.config?.categories || ['General'];

  // Debug logging to help identify the issue
  console.log('Selected Module:', selectedModule);
  console.log('Module Config:', selectedModule?.config);
  console.log('Available Categories:', availableCategories);

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center p-4">
        <div className="fixed inset-0 bg-black bg-opacity-50 transition-opacity" onClick={onClose}></div>
        
        <div className="relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[95vh] overflow-hidden">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <h2 className="text-lg font-bold text-gray-900">
              {isEditing ? 'Edit Ticket' : 'Create New Ticket'}
            </h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="p-6 max-h-[75vh] overflow-y-auto">
            <div className="space-y-6">
              {/* Ticket Number and Status */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-xs font-medium text-gray-700 mb-1">
                    Ticket #
                  </label>
                  <input
                    type="text"
                    value={formData.ticketNumber}
                    className="w-full px-2 py-1.5 text-xs border border-gray-300 rounded-md bg-gray-50 text-gray-600"
                    disabled
                  />
                </div>
                
                <div>
                  <label className="block text-xs font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <input
                    type="text"
                    value={formData.status}
                    className="w-full px-2 py-1.5 text-xs border border-gray-300 rounded-md bg-gray-50 text-gray-600"
                    disabled
                  />
                </div>
              </div>

              {/* Title */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Title *
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                  placeholder="Brief description..."
                />
              </div>

              {/* Description */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Description *
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  rows={6}
                  className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                  placeholder="Detailed description..."
                />
              </div>

              {/* Priority and Category */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-xs font-medium text-gray-700 mb-1">
                    Priority *
                  </label>
                  <select
                    value={formData.priority}
                    onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="LOW">Low</option>
                    <option value="MEDIUM">Medium</option>
                    <option value="HIGH">High</option>
                    <option value="CRITICAL">Critical</option>
                  </select>
                </div>

                <div>
                  <label className="block text-xs font-medium text-gray-700 mb-1">
                    Category *
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    {availableCategories.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-xs font-medium text-gray-700 mb-1">
                    Est Completion Date
                  </label>
                  <input
                    type="date"
                    value={formData.estCompletionDate}
                    onChange={(e) => setFormData({ ...formData, estCompletionDate: e.target.value })}
                    className="w-full px-2 py-1.5 text-xs border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    min={new Date().toISOString().split('T')[0]}
                  />
                </div>
              </div>

              {/* Department and Assigned To */}
              {/* Department and Assigned To - Only show for EO */}
              {user?.role === 'EO' && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      Department *
                    </label>
                    <select
                      value={formData.department}
                      onChange={(e) => setFormData({ ...formData, department: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    >
                      {availableDepartments.map(dept => (
                        <option key={dept} value={dept}>{dept}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      Assigned To
                    </label>
                    <select
                      value={formData.assignedTo}
                      onChange={(e) => setFormData({ ...formData, assignedTo: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Unassigned</option>
                      {availableUsers.map(user => (
                        <option key={user.id} value={user.id}>{user.name}</option>
                      ))}
                    </select>
                  </div>
                </div>
              )}

              {/* File Upload */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Attachments
                </label>
                <div className="mt-1 flex justify-center px-4 pt-3 pb-4 border-2 border-gray-300 border-dashed rounded-md">
                  <div className="space-y-1 text-center">
                    <Upload className="mx-auto h-8 w-8 text-gray-400" />
                    <div className="flex text-xs text-gray-600">
                      <label htmlFor="file-upload" className="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 text-xs">
                        <span>Upload files</span>
                        <input
                          id="file-upload"
                          name="file-upload"
                          type="file"
                          className="sr-only"
                          multiple
                          onChange={handleFileChange}
                          accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.xlsx,.xls"
                        />
                      </label>
                      <p className="pl-1">or drag and drop</p>
                    </div>
                    <p className="text-xs text-gray-500 px-2">
                      PDF, Word, Excel, Images up to 5MB
                    </p>
                  </div>
                </div>
                
                {files && files.length > 0 && (
                  <div className="mt-2">
                    <p className="text-xs text-gray-600">Selected files:</p>
                    <ul className="text-xs text-gray-500">
                      {Array.from(files).map((file, index) => (
                        <li key={index}>{file.name} ({(file.size / 1024).toFixed(1)} KB)</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>

            {/* Form Actions */}
            <div className="flex justify-end space-x-2 mt-6 pt-4 border-t border-gray-200">
              <button
                type="button"
                onClick={onClose}
                className="px-3 py-1.5 text-sm text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors duration-200"
                disabled={loading}
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading}
                className="px-3 py-1.5 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'Saving...' : isEditing ? 'Update Ticket' : 'Create Ticket'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default TicketForm;